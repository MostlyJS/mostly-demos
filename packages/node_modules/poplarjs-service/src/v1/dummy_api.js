const makeDebug = require('debug');
const poplar = require('mostly-poplarjs');
const Entity = require('mostly-entity');
const util = require('util');

const debug = makeDebug('poplarjs:dummy_api');

// User Entity
const DummyEntity = new Entity('Dummy', {
  username: true,
  age: true,
  description: { as: 'introduction' },
  nation: { value: 'China' },
  gender: { default: 'unknown' },
  fullname: function(obj) {
    return util.format('%s %s', obj.firstName || '', obj.lastName || '');
  },
  isAdult: function(obj) {
    return obj.age >= 18 ? true : false;
  },
  hasCreditCard: function(obj) {
    return obj.creditCard ? true : false;
  }
});

const DummyApi = new poplar.ApiBuilder('dummies', { version: 'v1' });

DummyApi.before('*', function(ctx, next) {
  console.log('  => before.dummies.v1.* called');
  next();
});

DummyApi.before('info', function(ctx, next) {
  console.log('  => before.dummies.v1.info called');
  next();
});

DummyApi.after('info', function(ctx, next) {
  console.log('  => after.dummies.v1.info called');
  next();
});

DummyApi.after('*', function(ctx, next) {
  console.log('  => after.dummies.v1.* called');
  next();
});

DummyApi.define('info', {
  accepts: [
    {
      arg: 'id',
      type: 'number',
      validates: {
        required: { message: 'id can\'t be empty' },
        isInt: { message: 'id must be a integer' },
        largerThan20: function(val) {
          if (val <= 20) {
            return 'id must be large than 20';
          }
        }
      },
      description: 'user id'
    }
  ],
  description: 'Get user info',
  http: { path: 'info', verb: 'get' },
  presenter: DummyEntity,
  returns: function(ctx, cb) {
    var data = ctx.result || {};
    cb(null, { data });
  }
}, function(params, cb) {
  debug('dummy.info', params);

  cb(null, {
    username: 'Dummy',
    age: 25,
    description: 'A dummy who is yummy',
    firstName: 'Dummy',
    lastName: 'Yummy',
    creditCard: 88888888888888,
    gender: 'male'
  });
});

DummyApi.define('show', {
  accepts: [
    {
      arg: 'id',
      type: 'number',
      required: true,
      description: 'user id'
    }
  ],
  description: 'Get user info',
  http: { path: ':id/show', verb: 'get' }
}, function(params, cb) {
  cb(null, { id: params.id, version: 'v1' });
});

DummyApi.define('create', {
  accepts: [
    {
      arg: 'id',
      type: 'number',
      required: true,
      description: 'user id'
    }
  ],
  description: 'Create user info',
  http: { path: '', verb: 'post' }
}, function(params, cb) {
  cb(null, { id: params.id });
});

DummyApi.define('update', {
  accepts: [
    {
      arg: 'id',
      type: 'number',
      required: true,
      description: 'user id'
    }
  ],
  description: 'Change user info',
  http: { path: ':id', verb: 'put' }
}, function(params, cb) {
  cb(null, { id: params.id + 1 });
});

DummyApi.define('action', {
  accepts: [
    {
      arg: 'id',
      type: 'number',
      required: true,
      description: 'user id'
    }
  ],
  description: 'Action user info',
  http: { path: ':id/action', verb: 'put' }
}, function(params, cb) {
  cb(null, { id: params.id + 100 });
});

DummyApi.define('call', {
  accepts: [
    {
      arg: 'headers',
      type: 'object',
      description: 'headers信息',
      http: function(ctx) {
        return ctx.req.headers;
      }
    }
  ],
  description: 'Call remote service',
  http: { path: 'call', verb: 'get' }
}, function(params, cb) {
  DummyApi.act('dummies.show', {
    path: '/dummies/1/show',
    verb: 'get',
    version: 'v1',
    headers: params.headers,
    query: { a: 1 },
  }, function(err, data) {
    cb(err, data);
  });
});

module.exports = DummyApi;
